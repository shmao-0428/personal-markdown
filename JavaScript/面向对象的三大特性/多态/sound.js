// 动物发出声音
class Animal {
  constructor() {
    this.makeSound = (animal) => {
      animal.sound();
    };
  }
}
class Dog {
  sound() {
    console.log('汪汪');
  }
}
class Duck {
  sound() {
    console.log('嘎嘎');
  }
}

let animal = new Animal();
animal.makeSound(new Dog());
animal.makeSound(new Duck());

/** 多态: 通过指向父类的引用, 来调用在不同子类中的实现的方法
 * 同一个操作作用于不同的对象上面, 会有不同的解释和执行结果;
 * 换句话说, 给不同的对象发送同一个消息的时候, 这些对象会根据这个消息分别给出不同的反馈
 */

/**
 * 多态背后的思想是将“做什么”和“谁去做以及怎样去做”分离开来，也就是将“不变的事物”与 “可能改变的事物”分离开来。
 * 在这个故事中，动物都会叫，这是不变的，但是不同类型的动物具体怎么叫是可变的。把不变的部分隔离出来，把可变的部分封装起来，
 * 这给予了我们扩展程序的能力，程序看起来是可生长的，也是符合开放-封闭原则的，相对于修改代码来说，仅仅增加代码就能完成同样的功能，
 * 这显然优雅和安全得多。
 */
